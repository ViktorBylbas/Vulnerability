using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;
using System.Threading;
using System.IO;
using System.Data.SqlClient;
using System.Windows.Forms.DataVisualization.Charting;
using System.Globalization;

namespace Vulnerability
{
    public partial class Main : Form
    {
        public Main()
        {
            InitializeComponent();
            con = new SqlConnection();
            con.ConnectionString = @"Data Source = " + textBox1.Text + "; integrated security = true;" +
                "initial catalog = " + textBox2.Text + ";";

            //chartVulWeekMSSQL.Series.Add("MS SQL ");
            chartVulWeekMySQL.Series.Add("MySQL ");
            chartVulMySQL2.Series.Add("MySQL");
            chartVulWeekOracle.Series.Add("Oracle ");
            chartVulOracle2.Series.Add("Oracle ");
            //chartExpectedValueMSSQL.Series.Add("MS SQL ");
            chartExpectedValueMySQL.Series.Add("MySQL ");
            chartExpectedValueOracle.Series.Add("Oracle");
            //chartVarianceMSSQL.Series.Add("MS SQL ");
            chartVarianceMySQL.Series.Add("MySQL");
            chartVarianceOracle.Series.Add("Oracle");
            //chartForecastErrorsMSSQL.Series.Add("MS SQL прогн. экс.");
            chartForecastErrorsMySQL.Series.Add("MySQL прогн.\nэкс.");
            chartForecastErrorsOracle.Series.Add("Oracle прогн.\nэкс.");
            chartGistaMySQL.Series.Add("Гистограмма MySQL");
            //chartVulWeekMSSQL.Series[0].Color = Color.Red;
            chartVulWeekMySQL.Series[0].Color = Color.Red;
            chartVulMySQL2.Series[0].Color = Color.Red;
            chartVulWeekOracle.Series[0].Color = Color.Red;
            chartVulOracle2.Series[0].Color = Color.Red;
            //chartExpectedValueMSSQL.Series[0].Color = Color.Red;
            chartExpectedValueMySQL.Series[0].Color = Color.Red;
            chartExpectedValueOracle.Series[0].Color = Color.Red;
            //chartVarianceMSSQL.Series[0].Color = Color.Red;
            chartVarianceMySQL.Series[0].Color = Color.Red;
            chartVarianceOracle.Series[0].Color = Color.Red;
            //chartForecastErrorsMSSQL.Series[0].Color = Color.Red;
            chartForecastErrorsMySQL.Series[0].Color = Color.Red;
            chartForecastErrorsOracle.Series[0].Color = Color.Red;
            chartGistaMySQL.Series[0].Color = Color.Red;
            //chartVulWeekMSSQL.Series[0].ChartType = SeriesChartType.Column;
            chartVulWeekMySQL.Series[0].ChartType = SeriesChartType.Column;
            chartVulMySQL2.Series[0].ChartType = SeriesChartType.Column;
            chartVulWeekOracle.Series[0].ChartType = SeriesChartType.Column;
            chartVulOracle2.Series[0].ChartType = SeriesChartType.Column;
            //chartExpectedValueMSSQL.Series[0].ChartType = SeriesChartType.Column;
            chartExpectedValueMySQL.Series[0].ChartType = SeriesChartType.Column;
            chartExpectedValueOracle.Series[0].ChartType = SeriesChartType.Column;
            //chartVarianceMSSQL.Series[0].ChartType = SeriesChartType.Column;
            chartVarianceMySQL.Series[0].ChartType = SeriesChartType.Column;
            chartVarianceOracle.Series[0].ChartType = SeriesChartType.Column;
            //chartForecastErrorsMSSQL.Series[0].ChartType = SeriesChartType.Column;
            chartForecastErrorsMySQL.Series[0].ChartType = SeriesChartType.Column;
            chartForecastErrorsOracle.Series[0].ChartType = SeriesChartType.Column;
            chartGistaMySQL.Series[0].ChartType = SeriesChartType.Column;

            //chartVulWeekMSSQL.Series.Add("Прогнозирование Экс");
            chartVulWeekMySQL.Series.Add("Прогнозирование\nЭкс");
            chartVulWeekOracle.Series.Add("Прогнозирование\nЭкс");
            //chartExpectedValueMSSQL.Series.Add("Прогнозирование Экс");
            chartExpectedValueMySQL.Series.Add("Прогнозирование\nЭкс");
            chartExpectedValueOracle.Series.Add("Прогнозирование\nЭкс");
            //chartVarianceMSSQL.Series.Add("Прогнозирование Экс");
            chartVarianceMySQL.Series.Add("Прогнозирование\nЭкс");
            chartVarianceOracle.Series.Add("Прогнозирование\nЭкс");
            //chartForecastErrorsMSSQL.Series.Add("MS SQL прогн. скольз.");
            chartForecastErrorsMySQL.Series.Add("MySQL прогн.\nскольз.");
            chartForecastErrorsOracle.Series.Add("Oracle прогн.\nскольз.");
            //chartVulWeekMSSQL.Series[1].Color = Color.YellowGreen;
            chartVulWeekMySQL.Series[1].Color = Color.YellowGreen;
            chartVulWeekOracle.Series[1].Color = Color.YellowGreen;
            //chartExpectedValueMSSQL.Series[1].Color = Color.YellowGreen;
            chartExpectedValueMySQL.Series[1].Color = Color.YellowGreen;
            chartExpectedValueOracle.Series[1].Color = Color.YellowGreen;
            //chartVarianceMSSQL.Series[1].Color = Color.YellowGreen;
            chartVarianceMySQL.Series[1].Color = Color.YellowGreen;
            chartVarianceOracle.Series[1].Color = Color.YellowGreen;
            //chartForecastErrorsMSSQL.Series[1].Color = Color.YellowGreen;
            chartForecastErrorsMySQL.Series[1].Color = Color.YellowGreen;
            chartForecastErrorsOracle.Series[1].Color = Color.YellowGreen;
            //chartVulWeekMSSQL.Series[1].ChartType = SeriesChartType.Column;
            chartVulWeekMySQL.Series[1].ChartType = SeriesChartType.Column;
            chartVulWeekOracle.Series[1].ChartType = SeriesChartType.Column;
            //chartExpectedValueMSSQL.Series[1].ChartType = SeriesChartType.Column;
            chartExpectedValueMySQL.Series[1].ChartType = SeriesChartType.Column;
            chartExpectedValueOracle.Series[1].ChartType = SeriesChartType.Column;
            //chartVarianceMSSQL.Series[1].ChartType = SeriesChartType.Column;
            chartVarianceMySQL.Series[1].ChartType = SeriesChartType.Column;
            chartVarianceOracle.Series[1].ChartType = SeriesChartType.Column;
            //chartForecastErrorsMSSQL.Series[1].ChartType = SeriesChartType.Column;
            chartForecastErrorsMySQL.Series[1].ChartType = SeriesChartType.Column;
            chartForecastErrorsOracle.Series[1].ChartType = SeriesChartType.Column;

            //chartVulWeekMSSQL.Series.Add("Прогнозирование скольз. средней");
            chartVulMySQL2.Series.Add("Прогнозирование\nскольз. средней");
            chartVulOracle2.Series.Add("Прогнозирование\nскольз. средней");
            //chartVulWeekMSSQL.Series[2].Color = Color.Cyan;
            chartVulMySQL2.Series[1].Color = Color.YellowGreen;
            chartVulOracle2.Series[1].Color = Color.YellowGreen;
            //chartVulWeekMSSQL.Series[2].ChartType = SeriesChartType.Column;
            chartVulMySQL2.Series[1].ChartType = SeriesChartType.Column;
            chartVulOracle2.Series[1].ChartType = SeriesChartType.Column;

            //chartVulWeekMSSQL.Series.Add("Прогнозирование скольз.\n средней новые");
            chartVulMySQL2.Series.Add("Прогнозирование\nскольз. средней\nновые");
            chartVulOracle2.Series.Add("Прогнозирование\nскольз.средней\nновые");
            //chartVulWeekMSSQL.Series[3].Color = Color.Pink;
            chartVulMySQL2.Series[2].Color = Color.Purple;
            chartVulOracle2.Series[2].Color = Color.Purple;
            //chartVulWeekMSSQL.Series[3].ChartType = SeriesChartType.Column;
            chartVulMySQL2.Series[2].ChartType = SeriesChartType.Column;
            chartVulOracle2.Series[2].ChartType = SeriesChartType.Column;

            //chartVulWeekMSSQL.Series.Add("Прогнозирование\n Экс новые");
            chartVulWeekMySQL.Series.Add("Прогнозирование\nЭкс новые");
            chartVulWeekOracle.Series.Add("Прогнозирование\nЭкс новые");
            //chartVulWeekMSSQL.Series[4].Color = Color.Purple;
            chartVulWeekMySQL.Series[2].Color = Color.Purple;
            chartVulWeekOracle.Series[2].Color = Color.Purple;
            //chartVulWeekMSSQL.Series[4].ChartType = SeriesChartType.Column;
            chartVulWeekMySQL.Series[2].ChartType = SeriesChartType.Column;
            chartVulWeekOracle.Series[2].ChartType = SeriesChartType.Column;
        }

        List<double> CForMySql = new List<double>();
        List<double> CForOracle = new List<double>();
        List<double> SForMySQL = new List<double>();
        List<double> SForOracle = new List<double>();
        List<double> ZForMySQL = new List<double>();
        List<double> ZForOracle = new List<double>();
        
        List<double> errMySQLExp = new List<double>();
        List<double> errOracleExp = new List<double>();
        List<double> errMySQLSc = new List<double>();
        List<double> errOracleSc = new List<double>();

        private void bOutput_Click(object sender, EventArgs e)
        {
            //chartVulWeekMSSQL.Series[0].Points.Clear();
            /*chartVulWeekMSSQL.Series[1].Points.Clear();
            chartVulWeekMSSQL.Series[2].Points.Clear();
            chartVulWeekMSSQL.Series[3].Points.Clear();
            chartVulWeekMSSQL.Series[4].Points.Clear();*/
            //chartVulWeekMySQL.Series[0].Points.Clear();
            chartVulWeekMySQL.Series[1].Points.Clear();
            chartVulWeekMySQL.Series[2].Points.Clear();
            /*chartVulWeekMySQL.Series[3].Points.Clear();
            chartVulWeekMySQL.Series[4].Points.Clear();*/
            //chartVulWeekOracle.Series[0].Points.Clear();
            chartVulWeekOracle.Series[1].Points.Clear();
            chartVulWeekOracle.Series[2].Points.Clear();
            /*chartVulWeekOracle.Series[3].Points.Clear();
            chartVulWeekOracle.Series[4].Points.Clear();*/

            string req =
                "select TABLE_NAME from information_schema.tables WHERE TABLE_NAME not like '%view' and TABLE_NAME != 'sysdiagrams'";
            
            string req1 = "SELECT d.ID, CVE_ID, n.NAME_DB, p.PRODUCT, PUBLISHED_DT, MODIFIED_DT, SCORE, "
                + "ACCESS_COMPLEXITY FROM PRODUCT p, NAME_DBV n, DATA_DB d WHERE d.NAME_DB_ID = n.ID AND "
                + "d.PRODUCT_ID = p.ID ORDER BY Convert(datetime, PUBLISHED_DT, 104)";
            ds = new DataSet();
            ad = new SqlDataAdapter(req, con);
            ad.Fill(ds, "Tables");
            ad = new SqlDataAdapter(req1, con);
            foreach (DataRow row in ds.Tables[0].Rows)
            {
                ad.Fill(ds, row[0].ToString());
            }

            con.Open();
            List<DateTime> PublishedDTmssql = new List<DateTime>();
            List<DateTime> PublishedDTmysql = new List<DateTime>();
            List<DateTime> PublishedDToracle = new List<DateTime>();
            SqlCommand com = con.CreateCommand();

            com.CommandText = "DECLARE @st int EXEC GetID 'postgresql', @st OUTPUT SELECT * FROM DATA_DB WHERE NAME_DB_ID = @st"
                + " ORDER BY Convert(datetime, PUBLISHED_DT, 104)";
            SqlDataReader reader = com.ExecuteReader();
            while (reader.Read())
                PublishedDTmssql.Add(Convert.ToDateTime(reader.GetString(4)));
            reader.Close();

            com.CommandText = "DECLARE @st int EXEC GetID 'mysql', @st OUTPUT SELECT * FROM DATA_DB WHERE NAME_DB_ID = @st"
                + " ORDER BY Convert(datetime, PUBLISHED_DT, 104)";
            reader = com.ExecuteReader();
            while (reader.Read())
                PublishedDTmysql.Add(Convert.ToDateTime(reader.GetString(4)));
            reader.Close();

            com.CommandText = "DECLARE @st int EXEC GetID 'oracle', @st OUTPUT SELECT * FROM DATA_DB WHERE NAME_DB_ID = @st"
                + " ORDER BY Convert(datetime, PUBLISHED_DT, 104)";
            reader = com.ExecuteReader();
            while (reader.Read())
                PublishedDToracle.Add(Convert.ToDateTime(reader.GetString(4)));
            reader.Close();
            con.Close();

            CountVulnerability countVuln = new CountVulnerability();

            List<DateTime> countVulmssql = countVuln.CountVuln(PublishedDTmssql);
            List<DateTime> countVulmysql = countVuln.CountVuln(PublishedDTmysql);
            List<DateTime> countVuloracle = countVuln.CountVuln(PublishedDToracle);

            // Для 2014 года
            int[] countVulnYearmssql14 = countVuln.CountVulnerabilityYear(PublishedDTmssql, "2014");
            int[] countVulnYearmysql14 = countVuln.CountVulnerabilityYear(PublishedDTmysql, "2015");
            int[] countVulnYearoracle14 = countVuln.CountVulnerabilityYear(PublishedDToracle, "2015");

            Console.WriteLine("Количество " +countVulnYearmysql14.Length+" " + countVulnYearoracle14.Length);

            int[] countVulnQuartermssql14 = countVuln.CountVulnerabilityQuarter(PublishedDTmssql, "2014");
            int[] countVulnQuartermysql14 = countVuln.CountVulnerabilityQuarter(PublishedDTmysql, "2014");
            int[] countVulnQuarteroracle14 = countVuln.CountVulnerabilityQuarter(PublishedDToracle, "2014");

            int[] countVulnMonthmssql14 = countVuln.CountVulnerabilityMonth(PublishedDTmssql, "2014");
            int[] countVulnMonthmysql14 = countVuln.CountVulnerabilityMonth(PublishedDTmysql, "2014");
            int[] countVulnMonthoracle14 = countVuln.CountVulnerabilityMonth(PublishedDToracle, "2014");

            int[] countVulnWeekmssql14 = countVuln.CountVulnerabilityWeek(PublishedDTmssql, "2014");
            int[] countVulnWeekmysql14 = countVuln.CountVulnerabilityWeek(PublishedDTmysql, "2014");
            int[] countVulnWeekoracle14 = countVuln.CountVulnerabilityWeek(PublishedDToracle, "2014");

            Calculation calculation = new Calculation();

            // Для 2015 года
            int[] countVulnYearmssql15 = countVuln.CountVulnerabilityYear(PublishedDTmssql, "2015");
            int[] countVulnYearmysql15 = countVuln.CountVulnerabilityYear(PublishedDTmysql, "2015");
            int[] countVulnYearoracle15 = countVuln.CountVulnerabilityYear(PublishedDToracle, "2015");

            int[] countVulnQuartermssql15 = countVuln.CountVulnerabilityQuarter(PublishedDTmssql, "2015");
            int[] countVulnQuartermysql15 = countVuln.CountVulnerabilityQuarter(PublishedDTmysql, "2015");
            int[] countVulnQuarteroracle15 = countVuln.CountVulnerabilityQuarter(PublishedDToracle, "2015");

            int[] countVulnMonthmssql15 = countVuln.CountVulnerabilityMonth(PublishedDTmssql, "2015");
            int[] countVulnMonthmysql15 = countVuln.CountVulnerabilityMonth(PublishedDTmysql, "2015");
            int[] countVulnMonthoracle15 = countVuln.CountVulnerabilityMonth(PublishedDToracle, "2015");

            int[] countVulnWeekmssql15 = countVuln.CountVulnerabilityWeek(PublishedDTmssql, "2015");
            int[] countVulnWeekmysql15 = countVuln.CountVulnerabilityWeek(PublishedDTmysql, "2015");
            int[] countVulnWeekoracle15 = countVuln.CountVulnerabilityWeek(PublishedDToracle, "2015");

            List<string> DT = new List<string>();
            List<int> I = new List<int>();
            
            for (int i = 0; i < countVulmysql.Count() - 1; i++)
            {
                long elapsedTicks = countVulmysql[i + 1].Ticks - countVulmysql[i].Ticks;
                double minutes = elapsedTicks / 1000 / 86400;
                if (minutes != 0)
                    CForMySql.Add(minutes);
            }
            for (int i = 0; i < CForMySql.Count(); i++)
            {
                chartVulWeekMySQL.Series[0].Points.AddXY(i, CForMySql[i]);
                chartVulMySQL2.Series[0].Points.AddXY(i, CForMySql[i]);
            }

            for (int i = 0; i < countVuloracle.Count() - 1; i++)
            {
                long elapsedTicks = countVuloracle[i + 1].Ticks - countVuloracle[i].Ticks;
                double minutes = elapsedTicks / 1000 / 86400;
                if (minutes != 0)
                    CForOracle.Add(minutes);
            }
            for (int i = 0; i < CForOracle.Count(); i++)
            {
                chartVulWeekOracle.Series[0].Points.AddXY(i, CForOracle[i]);
                chartVulOracle2.Series[0].Points.AddXY(i, CForOracle[i]);
            }

            //---------------------------------Мат. ожидание

            List<double> ExpValMySql = new List<double>();
            ExpValMySql = calculation.ExpectedValueGraf(CForMySql);
            for (int i = 0; i < ExpValMySql.Count(); i++)
                chartExpectedValueMySQL.Series[0].Points.AddXY(i, ExpValMySql[i]);

            List<double> ExpValOracle = new List<double>();
            ExpValOracle = calculation.ExpectedValueGraf(CForOracle);
            for (int i = 0; i < ExpValOracle.Count(); i++)
                chartExpectedValueOracle.Series[0].Points.AddXY(i, ExpValOracle[i]);

            //---------------------------------Дисперсия

            List<double> VarianceMySQL = new List<double>();
            VarianceMySQL = calculation.VarianceGraf(CForMySql);
            for (int i = 0; i < VarianceMySQL.Count(); i++)
                chartVarianceMySQL.Series[0].Points.AddXY(i, VarianceMySQL[i]);

            List<double> VarianceOracle = new List<double>();
            VarianceOracle = calculation.VarianceGraf(CForOracle);
            for (int i = 0; i < VarianceOracle.Count(); i++)
                chartVarianceOracle.Series[0].Points.AddXY(i, VarianceOracle[i]);

            //---------------------------------Прогнозирование Эксп

            Forecasting forecasting = new Forecasting();
            int count = 0;
            SForMySQL = forecasting.MethodOfExponentialSmoothing(CForMySql, (double)nUDAlphaExp.Value);
            for (int i = 0; i < SForMySQL.Count(); i++)
                chartVulWeekMySQL.Series[1].Points.AddXY(i, SForMySQL[i]);
            List<double> SForMySQL2 = new List<double>();
            SForMySQL2 = forecasting.newMethodOfExponentialSmoothing(CForMySql, SForMySQL, (double)nUDAlphaExp.Value);
            for (int i = SForMySQL.Count(); i < SForMySQL.Count() + 1; i++)
                chartVulWeekMySQL.Series[2].Points.AddXY(i, SForMySQL2[count++]);

            count = 0;
            SForOracle = forecasting.MethodOfExponentialSmoothing(CForOracle, (double)nUDAlphaExp.Value);
            for(int i = 0; i < SForOracle.Count(); i++)
                chartVulWeekOracle.Series[1].Points.AddXY(i, SForOracle[i]);
            List<double> SForOracle2 = new List<double>();
            SForOracle2 = forecasting.newMethodOfExponentialSmoothing(CForOracle, SForOracle, (double)nUDAlphaExp.Value);
            for (int i = SForOracle.Count(); i < SForOracle.Count() + 1; i++)
                chartVulWeekOracle.Series[2].Points.AddXY(i, SForOracle2[count++]);

            //---------------------------------Прогнозирование скольз.

            count = 0;

            ZForMySQL = forecasting.MethodOfMovingAverage(CForMySql);
            for (int i = 0; i < ZForMySQL.Count(); i++)
                chartVulMySQL2.Series[1].Points.AddXY(i, ZForMySQL[i]);
            List<double> ZForMySQL2 = new List<double>();
            ZForMySQL2 = forecasting.newMethodOfMovingAverage(CForMySql, ZForMySQL);
            count = 0;
            for (int i = ZForMySQL.Count(); i < ZForMySQL.Count() + 1; i++)
                chartVulMySQL2.Series[2].Points.AddXY(i, ZForMySQL2[count++]);

            ZForOracle = forecasting.MethodOfMovingAverage(CForOracle);
            for (int i = 0; i < ZForOracle.Count(); i++)
                chartVulOracle2.Series[1].Points.AddXY(i, ZForOracle[i]);
            List<double> ZForOracle2 = new List<double>();
            ZForOracle2 = forecasting.newMethodOfMovingAverage(CForOracle, ZForOracle);
            count = 0;
            for (int i = ZForOracle.Count(); i < ZForOracle.Count() + 1; i++)
                chartVulOracle2.Series[2].Points.AddXY(i, ZForOracle2[count++]);

            //---------------------------------Ошибки прогнозов

            // эксп.

            for (int i = 0; i < CForMySql.Count(); i++)
            {
                errMySQLExp.Add(SForMySQL[i] - CForMySql[i]);
                chartForecastErrorsMySQL.Series[0].Points.AddXY(i, SForMySQL[i] - CForMySql[i]);
            }

            for (int i = 0; i < CForOracle.Count(); i++)
            {
                errOracleExp.Add(SForOracle[i] - CForOracle[i]);
                chartForecastErrorsOracle.Series[0].Points.AddXY(i, SForOracle[i] - CForOracle[i]);
            }

            // скольж.

            for (int i = 0; i < ZForMySQL.Count() - 1; i++)
            {
                errMySQLSc.Add(ZForMySQL[i] - CForMySql[i]);
                chartForecastErrorsMySQL.Series[1].Points.AddXY(i, ZForMySQL[i] - CForMySql[i]);
            }

            for (int i = 0; i < ZForOracle.Count() - 1; i++)
            {
                errOracleSc.Add(ZForOracle[i] - CForOracle[i]);
                chartForecastErrorsOracle.Series[1].Points.AddXY(i, ZForOracle[i] - CForOracle[i]);
            }

            //---------------------------------Гистограмма

            Dictionary<int, int> gistMySQL = new Dictionary<int, int>();
            gistMySQL = Gistogramm(CForMySql);
            foreach (var item in gistMySQL)
                chartGistaMySQL.Series[0].Points.AddXY(item.Key, item.Value);

            //---------------------------------Показатели 

            double[] UMySQL = Tests.Mann_Whitney(CForMySql.Count(), CForMySql);
            lForCalcMySQL.Text = "Максимальное значение:\n" + CForMySql.Max() + Environment.NewLine +
                "Минимальное значение:\n" + CForMySql.Min() + Environment.NewLine +
                "Медиана:\n" + calculation.Mediana(CForMySql) + Environment.NewLine +
                "Показатель Херста:\n" +
                Tests.Herst(CForMySql, CForMySql.Count()) + Environment.NewLine +
                "Тест Сиджела-Тьюки:\n" +
                Tests.Siegel_Tukey(CForMySql.Count(), CForMySql) + Environment.NewLine +
                "Тест Манна-Уитни:\n" +
                UMySQL[0] + "\nN1 = " + UMySQL[1] + "\nN2 = " + UMySQL[2];
            lForCalcMySQL2.Text = "Прогнозное значение\nскольз.: " + ZForMySQL2[0] + Environment.NewLine +
                "Прогнозное значение\nэксп.: " + Math.Round(SForMySQL2[0], 2);

            double[] UOracle = Tests.Mann_Whitney(CForOracle.Count(), CForOracle);
            lForCalcOracle.Text = "Максимальное значение:\n" + CForOracle.Max() + Environment.NewLine +
                "Минимальное значение:\n" + CForOracle.Min() + Environment.NewLine +
                "Медиана:\n" + calculation.Mediana(CForOracle) + Environment.NewLine +
                "Показатель Херста:\n" + Tests.Herst(CForOracle, CForOracle.Count()) + Environment.NewLine +
                "Тест Сиджела-Тьюки:\n" + Tests.Siegel_Tukey(CForOracle.Count(), CForOracle) + Environment.NewLine +
                "Тест Манна-Уитни:\n" + UOracle[0] + "\nN1 = " + UOracle[1] + "\nN2 = " + UOracle[2];
            lForCalcOracle2.Text = "Прогнозное значение\nскольз.: " + ZForOracle2[0] + Environment.NewLine +
                "Прогнозное значение\nэксп.: " + Math.Round(SForOracle2[0], 2);

            labelExpectedValueMySQL.Text = "Математическое ожидание:\n" + 
                Calculation.ExpectedValue(CForMySql.Count(), CForMySql);

            labelExpectedValueOracle.Text = "Математическое ожидание:\n" +
                Calculation.ExpectedValue(CForOracle.Count(), CForOracle);

            labelVarianceMySQL.Text = "Среднее квадратическое\nотклонение: " + 
                Calculation.StandardDeviation(CForMySql.Count(), CForMySql);

            labelVarianceOracle.Text = "Среднее квадратическое\nотклонение: " +
                Calculation.StandardDeviation(CForOracle.Count(), CForOracle);

            labelErrorMySQL.Text = "Среднее квадратическое\nотклонение эксп.:\n" +
                Calculation.StandardDeviation(errMySQLExp.Count(), errMySQLExp) +
                "\nСреднее квадратическое\nотклонение скольз.:\n" +
                Calculation.StandardDeviation(errMySQLSc.Count(), errMySQLSc);

            labelErrorOracle.Text = "Среднее квадратическое\nотклонение эксп.:\n" +
                Calculation.StandardDeviation(errOracleExp.Count(), errOracleExp) +
                "\nСреднее квадратическое\nотклонение скольз.:\n" +
                Calculation.StandardDeviation(errOracleSc.Count(), errOracleSc);

            dgv.RowHeadersVisible = false;
            dgv.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
            dgv.DataSource = ds.Tables[3].DefaultView;
        }

        private static Dictionary<int, int> Gistogramm(List<double> array)
        {
            double maxColumn = array.Max();
            Dictionary<int, int> test = new Dictionary<int, int>();

            int step = (int)array.Max() / 10;

            for (int i = 1; i < 11 ; i++)
            {
                for (int j = 0; j > array.Count; i++)
                {
                    if (10 * i < array[j])
                    {
                        test.Add( i, (int)array[j] );
                    }
                }
            }
            
            return test;
        }

        string path = "";

        private void bOpen_Click(object sender, EventArgs e)
        {
            path = FileOpen.Open();
            if (path == "")
                bWriteToDB.Enabled = false;
            else
                bWriteToDB.Enabled = true;
        }

        public SqlConnection con;
        public SqlDataAdapter ad;
        public DataSet ds;

        private void Connection(string request1, string request2)
        {
            try
            {
                con.Open();
                SqlCommand SelectCmd = new SqlCommand(request1, con);
                ad = new SqlDataAdapter();
                ad.SelectCommand = SelectCmd;
                SelectCmd.ExecuteNonQuery();

                SqlCommand SelectCmd2 = new SqlCommand(request2, con);
                ad = new SqlDataAdapter();
                ad.SelectCommand = SelectCmd2;
                SelectCmd2.ExecuteNonQuery();
            }
            catch
            {
                MessageBox.Show("Не правильный запрос", "Ошибка");
            }
            finally
            {
                con.Close();
            }
        }

        private void bWriteToDB_Click(object sender, EventArgs e)
        {
            SearchID search = new SearchID();
            using (XmlReader xml = XmlReader.Create(path))//nvdcve-2.0-2014
            {
                var se = search.Search(path);
                while (xml.Read())
                {
                    switch (xml.NodeType)
                    {
                        case XmlNodeType.Element:
                            if (xml.Name == "entry")
                            {
                                EntryType entry = new EntryType(xml.ReadOuterXml());
                                foreach (var f in se)
                                    if (entry.id == f)
                                    {
                                        if (entry.VulnerableSoftwareList != null)
                                        {
                                            for (int i = 0; i < entry.VulnerableSoftwareList.Products.Count(); i++)
                                            {
                                                string request1 = "Insert into PRODUCT (PRODUCT) Values (";
                                                if ((entry.VulnerableSoftwareList.Products[i].IndexOf("mysql:mysql") != -1)
                                                    || (entry.VulnerableSoftwareList.Products[i].IndexOf("oracle:mysql") != -1))
                                                {
                                                    request1 += "'" + entry.VulnerableSoftwareList.Products[i] +
                                                        "')";
                                                    string request2 =
                                                        "DECLARE @st int EXEC GetID 'mysql', @st OUTPUT Insert into dbo.DATA_DB (CVE_ID, NAME_DB_ID, PRODUCT_ID, PUBLISHED_DT, MODIFIED_DT, SCORE, ACCESS_COMPLEXITY) Values ('" +
                                                        entry.id + "', @st, SCOPE_IDENTITY(), '" + entry.PublishedDateTime + "', '"
                                                        + entry.ModifiedDateTime + "', " + entry.Cvss.BaseMetrics.Score + ", '" +
                                                        entry.Cvss.BaseMetrics.AccessComplexity + "')";
                                                    Connection(request1, request2);
                                                }
                                                if (entry.VulnerableSoftwareList.Products[i].IndexOf("postgresql:postgresql") != -1)
                                                {
                                                    request1 += "'" + entry.VulnerableSoftwareList.Products[i] + "')";
                                                    string request2 =
                                                        "DECLARE @st int EXEC GetID 'postgresql', @st OUTPUT Insert into dbo.DATA_DB (CVE_ID, NAME_DB_ID, PRODUCT_ID, PUBLISHED_DT, MODIFIED_DT, SCORE, ACCESS_COMPLEXITY) Values ('" +
                                                        entry.id + "', @st, SCOPE_IDENTITY(), '" + entry.PublishedDateTime + "', '"
                                                        + entry.ModifiedDateTime + "', " + entry.Cvss.BaseMetrics.Score + ", '" +
                                                        entry.Cvss.BaseMetrics.AccessComplexity + "')";
                                                    Connection(request1, request2);
                                                }
                                                if (entry.VulnerableSoftwareList.Products[i].IndexOf("oracle:database") != -1)
                                                {
                                                    request1 += "'" + entry.VulnerableSoftwareList.Products[i] + "')";
                                                    string request2 =
                                                            "DECLARE @st int EXEC GetID 'oracle', @st OUTPUT Insert into dbo.DATA_DB (CVE_ID, NAME_DB_ID, PRODUCT_ID, PUBLISHED_DT, MODIFIED_DT, SCORE, ACCESS_COMPLEXITY) Values ('" +
                                                            entry.id + "', @st, SCOPE_IDENTITY(), '" + entry.PublishedDateTime + "', '"
                                                            + entry.ModifiedDateTime + "', " + entry.Cvss.BaseMetrics.Score + ", '" +
                                                            entry.Cvss.BaseMetrics.AccessComplexity + "')";
                                                    Connection(request1, request2);
                                                }
                                            }
                                        }
                                    }
                            }
                            break;
                    }
                }
            }
            MessageBox.Show("Данные добавлены в БД", "Message");
        }

        private void bHelp_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Для того, чтобы добавить данные в БД нужно выбрать XML-файл в файловой системе," +
            "для этого нажмите на кнопку '" + bOpen.Text + "' и выберите нужный файл. После этого нажмите '" +
            bWriteToDB.Text + "' и данные будут считанны в БД.\nПотом нажимаете '" + bOutput.Text +
            "' и данные считываются с БД, проводятся расчёты характеристик, строятся графики, " +
            "но перед этим следует выбрать значение alpha (от 0 до 1) для прогнозирования экспоненциальным сглаживанием.\n" +
            "Если нужно будет отчистить данные, хранящиеся в базе данных, для этого нажмите на кнопку '" + bClearDB.Text +
            "'. Но для избежания случайного удаления данных, после нажатия на кнопку будет показано сообщение, " +
            "в котором нужно будет подтвердить удаление, нажав на кнопку «Да», или отменить действие, нажав на кнопку «Нет».\n" +
            "Если нужно сохранить все расчёты, то следует нажать кнопку '" + bSaveInFile.Text +"'.",
            "Help");
        }

        private void bClearDB_Click(object sender, EventArgs e)
        {
            DialogResult dialogResult = MessageBox.Show("Действительно хотите удалить данные из БД?", "Подверждение",
                MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                string request1 = "DROP TABLE DATA_DB";
                con.Open();
                SqlCommand SelectCmd = new SqlCommand(request1, con);
                ad = new SqlDataAdapter();
                ad.SelectCommand = SelectCmd;
                SelectCmd.ExecuteNonQuery();
                request1 = "DROP TABLE NAME_DBV";
                SelectCmd = new SqlCommand(request1, con);
                ad = new SqlDataAdapter();
                ad.SelectCommand = SelectCmd;
                SelectCmd.ExecuteNonQuery();
                request1 = "DROP TABLE PRODUCT";
                SelectCmd = new SqlCommand(request1, con);
                ad = new SqlDataAdapter();
                ad.SelectCommand = SelectCmd;
                SelectCmd.ExecuteNonQuery();
                request1 = "CREATE TABLE PRODUCT ([ID] [int] IDENTITY (1,1) NOT NULL PRIMARY KEY, [PRODUCT] [nvarchar](50),);";
                SelectCmd = new SqlCommand(request1, con);
                ad = new SqlDataAdapter();
                ad.SelectCommand = SelectCmd;
                SelectCmd.ExecuteNonQuery();
                request1 = "CREATE TABLE NAME_DBV ([ID] [int] IDENTITY (1,1) NOT NULL PRIMARY KEY, [NAME_DB] [nvarchar](50),);";
                SelectCmd = new SqlCommand(request1, con);
                ad = new SqlDataAdapter();
                ad.SelectCommand = SelectCmd;
                SelectCmd.ExecuteNonQuery();
                request1 = "CREATE TABLE DATA_DB ([ID] [int] IDENTITY (1,1) NOT NULL PRIMARY KEY, [CVE_ID] [nvarchar](30) NOT NULL,"
                    + " [NAME_DB_ID] [int], [PRODUCT_ID] [int] NOT NULL, [PUBLISHED_DT] [nvarchar](50)," +
                " [MODIFIED_DT] [nvarchar](50), [SCORE] [float], [ACCESS_COMPLEXITY] [nvarchar](10), " +
                "CONSTRAINT FK_DATA_DB_NAME_DBV_PRODUCT_ID FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (ID) " +
                "ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT FK_DATA_DB_NAME_DBV_NAME_DB_ID FOREIGN KEY (NAME_DB_ID)" +
                " REFERENCES NAME_DBV (ID) ON DELETE CASCADE ON UPDATE CASCADE );";
                SelectCmd = new SqlCommand(request1, con);
                ad = new SqlDataAdapter();
                ad.SelectCommand = SelectCmd;
                SelectCmd.ExecuteNonQuery();
                request1 = "INSERT INTO NAME_DBV (NAME_DB) SELECT 'mysql' UNION ALL SELECT 'postgresql' UNION ALL SELECT 'oracle' ";
                SelectCmd = new SqlCommand(request1, con);
                ad = new SqlDataAdapter();
                ad.SelectCommand = SelectCmd;
                SelectCmd.ExecuteNonQuery();
                con.Close();
                MessageBox.Show("Данные удалены из БД");
            }
            else { }
        }

        private void bSaveInFile_Click(object sender, EventArgs e)
        {
            string[,] data = new string[dgv.RowCount + 1, dgv.ColumnCount];
            for (int i = 0; i < dgv.ColumnCount; i++)
                data[0, i] = dgv.Columns[i].HeaderText;

            for (int i = 1; i < dgv.RowCount - 1; i++)
                for (int j = 0; j < dgv.ColumnCount; j++)
                {
                    data[1, j] = dgv[j, 0].Value.ToString();
                    data[i + 1, j] = dgv[j, i].Value.ToString();
                    if (dgv[1, i - 1].Value.ToString() == dgv[1, i].Value.ToString())
                        data[i + 1, 1] = "";
                }
            Save.SaveInFile(dgv.RowCount, dgv.ColumnCount, data);
            Save.SaveInFile(CForMySql, SForMySQL, errMySQLExp, ZForMySQL, errMySQLSc);
            Save.SaveInFile(CForOracle, SForOracle, errOracleExp, ZForOracle, errOracleSc);
        }

        private void dgv_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            //dgv.Sort(dgv.Columns[0], ListSortDirection.Ascending);
            //MessageBox.Show(dgv.Columns[0].ToString());
        }        
    }
}
