using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Vulnerability
{
    class Forecasting
    {
        public List<double> MethodOfExponentialSmoothing(List<double> C, double a = 0.5)
        {
            List<double> S = new List<double>();
            S.Add(0);
            //for (int t = 0; t < C.Count(); t++)
                S.Add((1 - a) * S[0] + a * C[0]);
            for (int t = 1; t < C.Count(); t++)
                S.Add(S[t] + a * (C[t] - S[t]));
            newMethodOfExponentialSmoothing(C, S, a = 0.5);
                return S;
        }

        public List<double> newMethodOfExponentialSmoothing(List<double> C, List<double> S, double a = 0.5)
        {
            List<double> newS = new List<double>();
            for (int t = C.Count(); t < S.Count(); t++)
                newS.Add(S[t] + a * (S[t-1] - S[t]));
            for (int t = S.Count()-1; t < S.Count(); t++)
                newS.Add(newS[0] + a * (S[t] - newS[0]));
            for (int t = 0; t < newS.Count(); t++)
            {
                newS.Add(newS[t + 1] + a * (newS[t] - newS[t + 1]));
                if (newS.Count() > 10)
                    break;
            }
            return newS;
        }

        /*private const int RAND_MAX = 32767;

        private double WhiteNoise()
        {
            Random rand = new Random();
            double x = 2 * ((rand.Next() / ((double)RAND_MAX)) - 0.5);
            return x;
        }*/

        public List<double> MethodOfMovingAverage(List<double> X)
        {
            List<double> Z = new List<double>();
            int period = 5;
            for (int i = 0; i < period; i++)
                Z.Add(0);
            for (int i = 0; i < X.Count() - (period-1); i++)
                if (X.Count() - period > period - 1)
                    Z.Add((X[i] + X[i + 1] + X[i + 2] + X[i + 3] + X[i + 4]) / period);
            //newMethodOfMovingAverage(X, Z);
            return Z;
        }

        public List<double> newMethodOfMovingAverage(List<double> X, List<double> Z)
        {
            List<double> newZ = new List<double>();
            int period = 5;
            for (int i = X.Count() - (period - 1); i < Z.Count(); i++)
            {
                newZ.Add((X[i] + X[i + 1] + X[i + 2] + X[i + 3] + Z[i + 4]) / period);
                i++;
                newZ.Add((X[i] + X[i + 1] + X[i + 2] + Z[i + 3] + newZ[0]) / period);
                i++;
                newZ.Add((X[i] + X[i + 1] + Z[i + 2] + newZ[0] + newZ[1]) / period);
                i++;
                newZ.Add((X[i] + Z[i + 1] + newZ[0] + newZ[1] + newZ[2]) / period);
                i++;
                newZ.Add((Z[i] + newZ[0] + newZ[1] + newZ[2] + newZ[3]) / period);
                i++;
            }
            for (int i = 0; i < newZ.Count(); i++)
            {
                newZ.Add((newZ[i] + newZ[i+1] + newZ[i+2] + newZ[i+3] + newZ[i+4]) / period);
                if (newZ.Count() > 10)
                    break;
            }
            return newZ;
        }
    }
}
