using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Vulnerability
{
    class Calculation
    {
        public static double ExpectedValue(int length, List<double> arr) // Мат. ожидание
        {
            double M = 0;
            for (int i = 0; i < length; i++)
                M += arr[i];
            return Math.Round(M / length, 4);
        }

        public List<double> ExpectedValueGraf(List<double> list) // Мат. ожидание
        {
            int count = 1;
            List<double> list2 = new List<double>();
            double Sum = list[0];
            list2.Add(list[0]);
            for (int i = 1; i < list.Count(); i++)
            {
                Sum += list[i];
                list2.Add(Sum / ++count);
            }
                //M += arr[i];
            return list2;
        }

        public static double Variance(int length, List<double> arr) // Дисперсия 
        {
            double M = ExpectedValue(length, arr);
            double D = 0;
            for (int i = 0; i < length; i++)
                D += Math.Pow((arr[i] - M), 2);
            return Math.Round(D / length, 4);
        }

        public List<double> VarianceGraf(List<double> list) // Дисперсия 
        {
            double M = 0;
            List<double> list2 = new List<double>();
            int count = 1;
            double Sum = list[0];
            double Squre = 0;
            for (int i = 0; i < list.Count()-1; i++)
            {
                while(i <5)
                {
                    Sum += list[i + 1];
                    M = Sum / ++count;
                    Squre = (Math.Pow((list[i] - M), 2));
                    list2.Clear();
                    list2.Add(Squre / count - 1);
                    i++;
                }
                Sum += list[i + 1];
                M = Sum / ++count;
                Squre = (Math.Pow((list[i] - M), 2));
                list2.Add(Squre / count - 1);
            }
            return list2;
        }
        
        public double Mediana(List<double> list)
        {
            List<double> list2 = new List<double>();
            for (int i = 0; i < list.Count(); i++)
                list2.Add(list[i]);
            list2.Sort();
            if (list2.Count() % 2 == 0)
                return list2[Convert.ToInt32(list2.Count() / 2)];
            return list2[Convert.ToInt32(list2.Count() / 2)];
        }

        public static double StandardDeviation(int length, List<double> arr)
        {
            return Math.Round(Math.Sqrt(Variance(length, arr)), 4);
        }
    }
}